var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function r(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.d(t,{Z:()=>a});const a=function(){function e(t,r,n,o,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=r,this.state=n,this.mode=o,this.util=a}var t,a;return t=e,a=[{key:"onCreate",value:function(){}},{key:"onRender",value:function(){var e=this.state.data.name.value;"create"!==this.mode&&e&&this.util.setState((function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}({},e.data);return t.f5_bigip_url.disabled=!0,{data:t}}))}},{key:"onSave",value:function(){return!0}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}}],a&&o(t.prototype,a),e}();var i=t.Z;export{i as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZjVfYmlnaXBfdXJsX3NlcnZlcl9ob29rLmpzIiwibWFwcGluZ3MiOiJBQUNBLElBQUlBLEVBQXNCLENDQTFCQSxFQUF3QixDQUFDQyxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hGLEVBQW9CSSxFQUFFRixFQUFZQyxLQUFTSCxFQUFvQkksRUFBRUgsRUFBU0UsSUFDNUVFLE9BQU9DLGVBQWVMLEVBQVNFLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxNQ0ozRUgsRUFBd0IsQ0FBQ1MsRUFBS0MsSUFBVUwsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsSSxraEJDNkNsRixRQXZDTUksV0FDSix1Qiw0RkFBMkQsU0FDekRDLEtBQUEsZUFDQUEsS0FBQSxjQUNBQSxLQUFBLFFBQ0FBLEtBQUEsT0FDQUEsS0FBQSxPLDRDQUdGLGMsc0JBSUEsV0FDRSxJQUFNQyxFQUFhRCxLQUFLRSxNQUFNQyxLQUFLQyxLQUFuQyxNQUNBLFdBQUlKLEtBQUtLLE1BQ1AsR0FDRUwsS0FBQSxlQUFtQixZQUNqQixJQUFNRyxFLCtWQUFPLENBQUgsR0FBUUcsRUFBbEIsTUFFQSxPQURBSCxFQUFBQSxhQUFBQSxVQUFBQSxFQUNPLENBQUVBLEtBQUFBLFEsb0JBTWpCLFdBRUUsVywyQkFHRixjLHdCQUlBLGUsc0JBbkNJSixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1NwbHVua19UQV9mNS1iaWdpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX2Y1LWJpZ2lwLy4vdWNjX3VpX2V4dGVuc2lvbnMvZjVfYmlnaXBfdXJsX3NlcnZlcl9ob29rLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLyoqXG4gKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMSBTcGx1bmssIEluYy4gPHNhbGVzQHNwbHVuay5jb20+XG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTGljZW5zZVJlZi1TcGx1bmstOC0yMDIxXG4gKlxuICovXG5jbGFzcyBIb29rIHtcbiAgY29uc3RydWN0b3IgKGdsb2JhbENvbmZpZywgc2VydmljZU5hbWUsIHN0YXRlLCBtb2RlLCB1dGlsKSB7XG4gICAgdGhpcy5nbG9iYWxDb25maWcgPSBnbG9iYWxDb25maWdcbiAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWVcbiAgICB0aGlzLnN0YXRlID0gc3RhdGVcbiAgICB0aGlzLm1vZGUgPSBtb2RlXG4gICAgdGhpcy51dGlsID0gdXRpbFxuICB9XG5cbiAgb25DcmVhdGUgKCkge1xuICAgIC8vIE5vIGltcGxlbWVudGF0aW9uIHJlcXVpcmVkIGFzIG9mIG5vd1xuICB9XG5cbiAgb25SZW5kZXIgKCkge1xuICAgIGNvbnN0IHNlcnZlck5hbWUgPSB0aGlzLnN0YXRlLmRhdGEubmFtZS52YWx1ZVxuICAgIGlmICh0aGlzLm1vZGUgIT09ICdjcmVhdGUnKSB7XG4gICAgICBpZiAoc2VydmVyTmFtZSkge1xuICAgICAgICB0aGlzLnV0aWwuc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSB7IC4uLnByZXZTdGF0ZS5kYXRhIH1cbiAgICAgICAgICBkYXRhLmY1X2JpZ2lwX3VybC5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICByZXR1cm4geyBkYXRhIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvblNhdmUgKCkge1xuICAgIC8vIE5vIGltcGxlbWVudGF0aW9uIHJlcXVpcmVkIGFzIG9mIG5vd1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBvblNhdmVTdWNjZXNzICgpIHtcbiAgICAvLyBObyBpbXBsZW1lbnRhdGlvbiByZXF1aXJlZCBhcyBvZiBub3dcbiAgfVxuXG4gIG9uU2F2ZUZhaWwgKCkge1xuICAgIC8vIE5vIGltcGxlbWVudGF0aW9uIHJlcXVpcmVkIGFzIG9mIG5vd1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBIb29rXG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJIb29rIiwidGhpcyIsInNlcnZlck5hbWUiLCJzdGF0ZSIsImRhdGEiLCJuYW1lIiwibW9kZSIsInByZXZTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=